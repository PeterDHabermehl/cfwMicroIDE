["# robo control", "# Init position variables", "Init x 0", "Init y 0", "Init z 0", "Init st 0", "# Init destination variables", "Init dx 0", "Init dy 0", "Init dz 0", "# Init step variables", "Init a 0", "Init b 0 ", "Init c 0", "# Positions list", "ArrayInit pos_x 10;0;5", "ArrayInit pos_y 0;12;10", "ArrayInit pos_z 0;5;10", "ArrayInit pos_t 0;1;0", "# some more variables", "Init numSteps 0", "ArrayStat numSteps sizeOf pos_x", "Init count -1", "Init cs 0", "# Init stepper states", "Init s1 0", "Init s2 0", "Init s3 0", "# go to reference position 0;0;0;0", "Call home 1", "#", "# run through positions", "#", "Tag next", "Calc count count + 1", "QueryVar count", "# set tool states", "# out tool st", "IfVar count == numSteps ende", "Array dx readFrom pos_x count", "Array dy readFrom pos_y count", "Array dz readFrom pos_z count", "Array st readFrom pos_t count", "#", "Tag move", "Calc a dx - x", "Calc a 1 sgnCpy a", "Calc x x + a", "#", "Calc b dy - y", "Calc b 1 sgnCpy b", "Calc y y + b", "#", "Calc c dz - z", "Calc c 1 sgnCpy c", "Calc z z + c", "#", "Calc cs a || b", "Calc cs cs || c", "IfVar cs == 0 next", "Call step 1", "#", "Jump move", "#", "Tag ende", "#", "# stepper control submodules", "#", "Module step", "Calc s1 s1 + a", "Calc s2 s2 + b", "Calc s3 s3 + c", "Calc s1 s1 bitAnd 3", "Calc s2 s2 bitAnd 3", "Calc s3 s3 bitAnd 3", "Clear", "QueryVar s1", "QueryVar s2", "QueryVar s3", "Call stepper1 1", "Call stepper2 1", "Call stepper3 1", "MEnd", "#", "Module stepper1", "IfVar s1 == 0 s1p0", "IfVar s1 == 1 s1p1", "IfVar s1 == 2 s1p2", "# s1p3:", "# out s1_1_pos3state", "# out s1_2_pos3state", "Jump s1end", "Tag s1p0", "# out s1_1_pos0state", "# out s1_2_pos0state", "Jump s1end", "Tag s1p1", "# out s1_1_pos1state", "# out s1_2_pos1state", "Jump s1end", "Tag s1p2", "# out s1_1_pos2state", "# out s1_2_pos2state", "Tag s1end", "MEnd", "#", "Module stepper2", "IfVar s2 == 0 s2p0", "IfVar s2 == 1 s2p1", "IfVar s2 == 2 s2p2", "# s2p3:", "# out s2_1_pos3state", "# out s2_2_pos3state", "Jump s2end", "Tag s2p0", "# out s2_1_pos0state", "# out s2_2_pos0state", "Jump s2end", "Tag s2p1", "# out s2_1_pos1state", "# out s2_2_pos1state", "Jump s2end", "Tag s2p2", "# out s2_1_pos2state", "# out s2_2_pos2state", "Tag s2end", "MEnd", "#", "Module stepper3", "IfVar s3 == 0 s1p0", "IfVar s3 == 1 s1p1", "IfVar s3 == 2 s1p2", "# s3p3:", "# out s3_1_pos3state", "# out s3_2_pos3state", "Jump s3end", "Tag s3p0", "# out s3_1_pos0state", "# out s3_2_pos0state", "Jump s3end", "Tag s3p1", "# out s3_1_pos1state", "# out s3_2_pos1state", "Jump s3end", "Tag s1p3", "# out s3_1_pos2state", "# out s3_2_pos2state", "Tag s3end", "MEnd", "#", "#", "#", "Module home", "# run all steppers until end switches are released", "Call walkBack 1", "#", "Init s1 -1", "# set tool to \"0\" state", "# out tool 0", "# 4 steps forward for each motor", "# to set defined states", "Tag homerun", "Calc s1 s1 + 1", "Init s2 s1", "Init s3 s1", "Call stepper1 1", "Call stepper2 1", "Call stepper3 1", "LoopTo homerun 4", "# run all steppers until end switches are operated", "Call walkOn 1", "# run all forward until end switches are released again", "Call walkBack 1", "# set position variables accordingly", "Init x 0", "Init y 0", "Init z 0", "Init st 0", "MEnd", "#", "Module walkOn", "# run each stepper backwards", "# until end switch is operated (= 0)", "Tag walkOn", "FromIn FTD 1 D a", "Calc a 0 - a", "FromIn FTD 2 D b", "Calc b 0 - b", "FromIn FTD 3 D c", "Calc c 0 - c", "Calc cs a || b", "Calc cs cs || c", "Call step 1", "IfVar cs != 0 walkOn", "MEnd", "#", "Module walkBack", "# run each stepper forward", "# until end switch is released (= 1)", "Tag walkBack", "FromIn FTD 1 D a", "Calc a a bitXor 1", "FromIn FTD 2 D b", "Calc b b bitXor 1", "FromIn FTD 3 D c", "Calc c c bitXor 1", "Calc cs a || b", "Calc cs cs || c", "Call step 1", "IfVar cs != 0 walkBack", "MEnd"]