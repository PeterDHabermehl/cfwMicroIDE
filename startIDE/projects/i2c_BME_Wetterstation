["#", "# Wetterstation mit Bosch BME280", "# ", "Call init_sensor 1", "# ", "Init t_fine 0", "Init pAmb 0", "Init rHum 0", "Init y 0", "Init x 0", "Canvas clear", "Canvas load BME280.png", "Canvas show", "#", "Call update_graphs 1", "Interrupt Every 1000 update_graphs", "#", "Tag a", "Delay 200", "IfTouchArea 99 195 233 229 end", "Jump a", "#", "Tag end", "Stop", "#", "Module update_graphs", "Call read_temperature 1", "Call read_pressure 1", "Call read_humidity 1", "# clear drawing areas", "Color pen 255 255 255", "Pen plot 28 205", "Pen boxTo 46 15", "Pen plot 100 36", "Pen boxTo 226 52", "Pen plot 104 123", "Pen boxTo 227 147", "# update temperature", "Calc t_dC t_dC min 5000", "Calc t_dC t_dC max -1000", "Calc t_dC t_dC + 1000", "Calc t_dC t_dC * 3033", "Calc t_dC t_dC / 100000", "Calc y 198 - t_dC", "Color pen 255 0 0", "Pen plot 28 205", "Pen boxTo 46 y", "# update pressure", "Color pen 200 96 0", "IfVar pAmb < 100000 pAmb_isLow", "Calc integer 6 digit pAmb", "VarToText Helvetica 17 integer", "Pen text 116 144", "Tag pAmb_isLow", "Calc integer 5 digit pAmb", "VarToText Helvetica 17 integer", "Pen text 131 144", "Calc integer 4 digit pAmb", "VarToText Helvetica 17 integer", "Pen text 146 144", "Calc integer 3 digit pAmb", "VarToText Helvetica 17 integer", "Pen text 161 144", "Text Helvetica 17 .", "Pen text 176 144", "Calc integer 2 digit pAmb", "VarToText Helvetica 17 integer", "Pen text 184 144", "Calc integer 1 digit pAmb", "VarToText Helvetica 17 integer", "Pen text 199 144", "# update humidity", "Calc x rHum * 126", "Calc x x / 10000", "Calc x x + 100", "Color pen 0 128 255", "Pen move 100 36", "Pen boxTo x 52", "Canvas update", "MEnd", "#", "# read temperature", "#", "Module read_temperature", "# set temp register", "ArrayInit temp_raw 118;250", "I2CWrite FTD temp_raw", "# read temp register", "ArrayInit temp_raw 118;3", "I2CRead FTD temp_raw", "ArrayStat integer sizeOf temp_raw", "IfVar integer != 3  temp_halt", "#", "Init adc_T 0", "Init h 0", "Array h readFrom temp_raw 0", "Calc adc_T h bitShift 12 ", "Array h readFrom temp_raw 1", "Calc h h bitShift 4", "Calc adc_T adc_T + h", "Array h readFrom temp_raw 2", "Calc h h bitShift -4", "Calc adc_T adc_T + h", "#", "# compensation calc", "#", "Init n0", "Init n1", "Init var1", "Init var2", "Init t_dC", "#", "Calc n0 adc_T / 8", "Calc n1 dig_T1 * 2", "Calc n0 n0 - n1", "Calc n0 n0 * dig_T2", "Calc var1 n0 / 2048", "#", "Calc n1 adc_T / 16", "Calc n0 n1 - dig_T1", "Calc n0 n0 * n0", "Calc n0 n0 / 4096", "Calc n0 n0 * dig_T3", "Calc var2 n0 / 16384", "#", "Calc t_fine var1 + var2", "Calc t_dC t_fine * 5", "Calc t_dC t_dC + 128", "# temp in 0.01\u00b0C", "Calc t_dC t_dC / 256", "Return", "Tag temp_halt", "Canvas hide", "Print I2C Fehler!", "Stop", "MEnd", "#", "# read pressure", "#", "Module read_pressure", "# set pressure register", "ArrayInit press_raw 118;247", "I2CWrite FTD press_raw", "# read temp register", "Delay 50", "ArrayInit press_raw 118;3", "I2CRead FTD press_raw", "ArrayStat integer sizeOf press_raw", "IfVar integer != 3  pressure_halt", "#", "Init adc_P 0", "Init h 0", "Array h readFrom press_raw 0", "Calc adc_P 65536 * h ", "Array h readFrom press_raw 1", "Calc h h * 256", "Calc adc_P adc_P + h", "Array h readFrom press_raw 2", "Calc adc_P adc_P + h", "Calc adc_P adc_P / 16", "#", "Calc n t_fine / 2", "Init var1 0", "Init var2 0", "Calc var1 n / 2", "Calc var1 var1 - 64000", "#", "Calc var2 var1 * var1", "Calc var2 var2 * dig_P6", "Calc var2 var2 / 32768", "#", "Calc h var1 * dig_P5", "Calc h h * 2", "Calc var2 var2 + h", "#", "Calc h dig_P4 * 65536", "Calc var2 var2 / 4", "Calc var2 var2 + h", "#", "Calc h var1 * var1", "Calc h h * dig_P3", "Calc h h / 524288", "Calc var1 var1 * dig_P2", "Calc var1 var1 + h", "Calc var1 var1 / 524288", "#", "Calc var1 var1 / 32768", "Calc var1 var1 + 1", "Calc var1 var1 * dig_P1", "#", "IfVar var1 == 0 pressure_halt2", "#", "Calc pAmb 1048576 - adc_P", "Calc h var2 / 4096", "Calc h pAmb - h", "Calc h h * 6250", "Calc h h / var1", "#", "Calc var1 dig_P9 * h", "Calc var1 var1 * h", "Calc var1 var1 / 2147483648", "#", "Calc var2 h * dig_P8", "Calc var2 var2 / 32768", "#", "Calc pAmb var1 + var2", "Calc pAmb pAmb + dig_P7", "Calc pAmb pAmb / 16", "Calc pAmb pAmb + h", "Return", "Tag pressure_halt", "Canvas hide", "Print I2C Fehler!", "Stop", "Tag pressure_halt2", "Canvas hide", "Print pressure read fail", "Init pAmb 0", "MEnd", "#", "# read humidity", "#", "Module read_humidity", "# set humidity register", "ArrayInit hum_raw 118;253", "I2CWrite FTD hum_raw", "# read temp register", "ArrayInit hum_raw 118;2", "I2CRead FTD hum_raw", "ArrayStat integer sizeOf hum_raw", "IfVar integer != 2  humidity_halt", "#", "Init adc_H 0", "Init h 0", "Array h readFrom hum_raw 0", "Calc adc_H h bitShift 8", "Array h readFrom hum_raw 1", "Calc adc_H adc_H + h", "#", "# compensation calc", "#", "Init v_x1", "Init n 0", "Calc n t_fine * 12", "Calc v_x1 n - 76800", "#", "Calc h adc_H bitShift 14", "Calc integer dig_H4 bitShift 20", "Calc h h - integer", "Calc integer dig_H5 * v_x1", "Calc h h - integer", "Calc n h bitShift -15", "#", "Calc h v_x1 * dig_H3", "Calc h h bitShift -11", "Calc integer v_x1 * dig_H6", "Calc integer integer bitShift -10", "Calc h h * integer", "Calc h h + 32768", "Calc h h bitShift -10", "Calc h h + 2097152", "Calc h h * dig_H2", "Calc h h + 8192", "Calc h h bitShift -14", "Calc v_x1 h * n", "#", "Calc h v_x1 bitShift -15", "Calc h h * h", "Calc h h bitShift -7", "Calc h h * dig_H1", "Calc h h bitShift -4", "Calc v_x1 v_x1 - h", "#", "Init rHum 0", "Calc rHum v_x1 bitShift -12", "Calc rHum rHum min 10000", "Calc rHum rHum max 0", "Return", "Tag humidity_halt", "Canvas hide", "Print Humidity - I2C Fehler!", "Stop", "MEnd", "#", "# Sensor init & compensation values", "#", "Module init_sensor", "# init sensor", "# t_standby 500ms", "ArrayInit array 118;242;4", "I2CWrite FTD array", "ArrayInit array 118;245;132", "I2CWrite FTD array", "# normal mode", "ArrayInit array 118;244;111", "I2CWrite FTD array", "#", "# get correction values", "#", "ArrayInit array 118;136", "I2CWrite FTD array", "# ", "ArrayInit array 118;25", "I2CRead FTD array", "Init integer 0", "ArrayStat integer sizeOf array", "IfVar integer != 25  comp_break", "#", "ArrayInit array2 118;225", "I2CWrite FTD array2", "ArrayInit array2 118;8", "I2CRead FTD array2", "ArrayStat integer sizeOf array2", "IfVar integer != 8 comp_break", "#", "Init n 0 ", "Tag cloop", "Array integer readFrom array2 n", "Array integer appendTo array 0", "Calc n n + 1", "LoopTo cloop 8", "#", "# temp compensation", "#", "Init dig_T1 0", "Array integer readFrom array 1", "Calc dig_T1 integer bitShift 8", "Array integer readFrom array 0", "Calc dig_T1 dig_T1 + integer", "# ", "Init dig_T2 0", "Array integer readFrom array 3", "Calc dig_T2 integer bitShift 8", "Array integer readFrom array 2", "Calc dig_T2 dig_T2 + integer", "Calc dig_T2 dig_T2 sign 16", "# ", "Init dig_T3 0", "Array integer readFrom array 5", "Calc dig_T3 integer bitShift 8", "Array integer readFrom array 4", "Calc dig_T3 dig_T3 + integer", "Calc dig_T3 dig_T3 sign 16", "#", "# pressure compensation", "#", "Init dig_P1 0", "Array integer readFrom array 7", "Calc dig_P1 integer bitShift 8", "Array integer readFrom array 6", "Calc dig_P1 dig_P1 + integer", "#", "Init dig_P2 0", "Array integer readFrom array 9", "Calc dig_P2 integer bitShift 8", "Array integer readFrom array 8", "Calc dig_P2 dig_P2 + integer", "Calc dig_P2 dig_P2 sign 16", "#", "Init dig_P3 0", "Array integer readFrom array 11", "Calc dig_P3 integer bitShift 8", "Array integer readFrom array 10", "Calc dig_P3 dig_P3 + integer", "Calc dig_P3 dig_P3 sign 16", "#", "Init dig_P4 0", "Array integer readFrom array 13", "Calc dig_P4 integer bitShift 8", "Array integer readFrom array 12", "Calc dig_P4 dig_P4 + integer", "Calc dig_P4 dig_P4 sign 16", "#", "Init dig_P5 0", "Array integer readFrom array 15", "Calc dig_P5 integer bitShift 8", "Array integer readFrom array 14", "Calc dig_P5 dig_P5 sign 16", "#", "Init dig_P6 0", "Array integer readFrom array 17", "Calc dig_P6 integer bitShift 8", "Array integer readFrom array 16", "Calc dig_P6 dig_P6 + integer", "Calc dig_P6 dig_P6 sign 16", "#", "Init dig_P7 0", "Array integer readFrom array 19", "Calc dig_P7 integer bitShift 8", "Array integer readFrom array 18", "Calc dig_P7 dig_P7 + integer", "Calc dig_P7 dig_P7 sign 16", "#", "Init dig_P8 0", "Array integer readFrom array 21", "Calc dig_P8 integer bitShift 8", "Array integer readFrom array 20", "Calc dig_P8 dig_P8 + integer", "Calc dig_P8 dig_P8 sign 16", "#", "Init dig_P9 0", "Array integer readFrom array 23", "Calc dig_P9 integer bitShift 8", "Array integer readFrom array 22", "Calc dig_P9 dig_P9 + integer", "Calc dig_P9 dig_P9 sign 16", "#", "# humidity compensation values", "#", "Init dig_H1 0", "Array dig_H1 readFrom array 24", "#", "Init dig_H2 0", "Array integer readFrom array 26", "Calc dig_H2 dig_H2 bitShift 8", "Array integer readFrom array 25", "Calc dig_H2 dig_H2 + integer", "Calc dig_H2 dig_H2 sign 16", "#", "Init dig_H3 0", "Array dig_H3 readFrom array 27", "#", "Init e4 0", "Array e4 readFrom array 28", "Init e5 0", "Array e5 readFrom array 29", "Init e6 0", "Array e6 readFrom array 30", "#", "Init dig_H4 0", "Calc dig_H4 e4 bitShift 4", "Calc integer e5 bitAnd 15", "Calc dig_H4 dig_H4 + integer", "#", "Init dig_H5 0", "Calc e5 e5 bitShift -4", "Calc e5 e5 bitAnd 15", "Calc e6 e6 bitShift 4", "Calc dig_H5 e5 + e6", "#", "Init dig_H6", "Array dig_H6 readFrom array 31", "Calc dig_H6 dig_H6 sign 8", "# end of compensation values", "Return", "Tag comp_break", "Print Comp val err", "Stop", "MEnd"]
